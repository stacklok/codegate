# This workflow build (but does not push) the OCI image
name: OCI Image - Build

on:
  workflow_call:
    inputs:
      artifact-name:
        description: 'The name of the artifact to upload'
        required: true
        type: string
      platform:
        description: 'The platform to build the image for'
        required: true
        type: string

permissions:
  contents: read

jobs:
  docker-image:
    name: Check docker image build
    runs-on: ${{ inputs.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    env:
      IMAGE_NAME: stacklok/codegate
      IMAGE_TAG: dev
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up QEMU for cross-platform builds
        # Only set up QEMU if the platform is not linux/amd64
        if: ${{ inputs.platform != 'linux/amd64' }}
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@20319c5641d495c8a52e688b7dc5fada6c3a9fbc # v8
        with:
          github_token: ${{ github.token }}
          workflow: ".github/workflows/import_packages.yml"
          workflow_conclusion: success
          name: sqlite_data
          name_is_regexp: true
          skip_unpack: false
          if_no_artifact_found: ignore
      - name: Fetch latest release URL
        id: fetch_release_url
        run: |
          echo "LATEST_RELEASE=$(curl -s "https://api.github.com/repos/stacklok/codegate-ui/releases/latest" | jq -r '.zipball_url')" >> $GITHUB_ENV
      - name: Download git lfs dependencies
        run: |
          git lfs install
          git lfs pull
      - name: Test build - ${{ inputs.platform }}
        id: docker_build
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ inputs.platform }}
          push: false # Only attempt to build, to verify the Dockerfile is working
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LATEST_RELEASE=${{ env.LATEST_RELEASE }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Save Docker image as a tarball
        # Only save the image if the build was for linux/amd64, as we only need it for the integration tests
        if: ${{ inputs.platform == 'linux/amd64' }}
        run: |
          # List all images
          docker images
          # Save the image as a tarball
          docker save -o image.tar ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Upload Docker image artifact
        # Only upload the image if the build was for linux/amd64, as we only need it for the integration tests
        if: ${{ inputs.platform == 'linux/amd64' }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: ${{ inputs.artifact-name }}
          path: image.tar
