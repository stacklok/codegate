# This workflow builds and publishes the OCI image
name: OCI Image - Publish

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build-codegate-image:
    name: Build Docker image
    runs-on: ubuntu-latest-m
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
      - name: Compute version number
        id: version-string
        run: |
          DATE="$(date +%Y%m%d)"
          COMMIT="$(git rev-parse --short HEAD)"
          echo "tag=0.$DATE.$GITHUB_RUN_NUMBER-ref.$COMMIT" >> "$GITHUB_OUTPUT"
      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set container metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: docker-metadata
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description="Container image for the CodeGate local gateway"
            org.opencontainers.image.title="CodeGate container image"
            org.opencontainers.image.vendor="Stacklok Inc."
            org.opencontainers.image.version=${{ github.sha }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ steps.version-string.outputs.tag }}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@07ab29fd4a977ae4d2b275087cf67563dfdf0295 # v9
        with:
          github_token: ${{ github.token }}
          workflow: ".github/workflows/import_packages.yml"
          workflow_conclusion: success
          name: sqlite_data
          name_is_regexp: true
          skip_unpack: false
          if_no_artifact_found: ignore
      - name: Fetch latest FE commit SHA
        id: fetch_commit_fe_sha
        run: |
          echo "LATEST_RELEASE=$(curl -s "https://api.github.com/repos/stacklok/codegate-ui/releases/latest" | grep '"zipball_url":' | cut -d '"' -f 4)" >> $GITHUB_ENV
      - name: Download git lfs dependencies
        run: |
          git lfs install
          git lfs pull
      - name: Build and Push Image
        id: image-build
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: mode=max
          sbom: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LATEST_RELEASE=${{ env.LATEST_RELEASE }}
            CODEGATE_VERSION=${{ github.ref_name }}
      - name: Capture Image Digest
        id: image-digest
        run: |
          echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.version-string.outputs.tag }})" >> "$GITHUB_OUTPUT"
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.image-build.outputs.digest }}
          TAGS: ${{ steps.docker-metadata.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

